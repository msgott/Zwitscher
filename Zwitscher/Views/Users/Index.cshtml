@model IEnumerable<Zwitscher.Models.User>

@{
    ViewData["Title"] = "Users";
}

<h1>Users</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Username)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Password)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Birthday)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Biography)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.isLocked)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CreatedDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Role)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Following)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FollowedBy)
            </th>
            
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Id)
                </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Username)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Password)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Birthday)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Biography)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.isLocked)
            </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedDate)
                </td>
            <td>
                @Html.DisplayFor(modelItem => item.Role.Name)
            </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Following.Count)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FollowedBy.Count)
                </td>
                
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
<input type="button" id="sendmessage" value="Send" />
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/userHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            async function start() {
                try {
                    await connection.start();
                    console.log("SignalR Connected.");
                } catch (err) {
                    console.log(err);
                    setTimeout(start, 5000);
                }
            };
            connection.onclose(async () => {
                await start();
            });
            start();

            $('#sendmessage').click(async () => {
                // Call the Send method on the hub.
                //await connection.invoke("TestConnection", "test");
                await connection.invoke("TestConnection", "test");
                //connection.testConnection("test");

            });
            
        });
       
    </script>
}
